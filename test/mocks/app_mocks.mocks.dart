// Mocks generated by Mockito 5.2.0 from annotations
// in fluuter_boilerplate/test/mocks/app_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i18;
import 'dart:io' as _i11;
import 'dart:typed_data' as _i22;

import 'package:audioplayers/audioplayers.dart' as _i7;
import 'package:bloc/bloc.dart' as _i19;
import 'package:dartz/dartz.dart' as _i13;
import 'package:fluuter_boilerplate/app_setup/languages/entity/language_entity.dart'
    as _i23;
import 'package:fluuter_boilerplate/application/app_theme/theme_cubit.dart'
    as _i3;
import 'package:fluuter_boilerplate/application/asset_audio/assetaudio_bloc.dart'
    as _i9;
import 'package:fluuter_boilerplate/application/device_audio/deviceaudio_bloc.dart'
    as _i10;
import 'package:fluuter_boilerplate/application/infinite_list/infinite_list_bloc.dart'
    as _i17;
import 'package:fluuter_boilerplate/application/languages/language_cubit.dart'
    as _i6;
import 'package:fluuter_boilerplate/application/local_notes/local_notes_bloc.dart'
    as _i15;
import 'package:fluuter_boilerplate/application/network_radio/networkradio_bloc.dart'
    as _i8;
import 'package:fluuter_boilerplate/infrastructure/infinite_list_repo/entites/post_model.dart'
    as _i25;
import 'package:fluuter_boilerplate/infrastructure/infinite_list_repo/infinite_list_repo.dart'
    as _i16;
import 'package:fluuter_boilerplate/infrastructure/language_repo/language_repo.dart'
    as _i5;
import 'package:fluuter_boilerplate/infrastructure/local_notes/local_notes_repo.dart'
    as _i14;
import 'package:fluuter_boilerplate/infrastructure/local_notes/note_adapter/note_entities.dart'
    as _i24;
import 'package:fluuter_boilerplate/infrastructure/theme_repo/theme_repo.dart'
    as _i2;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i21;
import 'package:hive/src/box/default_key_comparator.dart' as _i20;
import 'package:hive_flutter/hive_flutter.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:uuid/uuid.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAddThemeRepository_0 extends _i1.Fake
    implements _i2.AddThemeRepository {}

class _FakeThemeState_1 extends _i1.Fake implements _i3.ThemeState {}

class _FakeBox_2<E> extends _i1.Fake implements _i4.Box<E> {}

class _FakeLazyBox_3<E> extends _i1.Fake implements _i4.LazyBox<E> {}

class _FakeHiveInterface_4 extends _i1.Fake implements _i4.HiveInterface {}

class _FakeLanguageRepository_5 extends _i1.Fake
    implements _i5.LanguageRepository {}

class _FakeLanguageState_6 extends _i1.Fake implements _i6.LanguageState {}

class _FakeAudioPlayer_7 extends _i1.Fake implements _i7.AudioPlayer {}

class _FakeNetworkAudioState_8 extends _i1.Fake
    implements _i8.NetworkAudioState {}

class _FakeAudioCache_9 extends _i1.Fake implements _i7.AudioCache {}

class _FakeAssetAudioState_10 extends _i1.Fake implements _i9.AssetAudioState {}

class _FakeDeviceAudioState_11 extends _i1.Fake
    implements _i10.DeviceAudioState {}

class _FakeUri_12 extends _i1.Fake implements Uri {}

class _FakeFile_13 extends _i1.Fake implements _i11.File {}

class _FakeUuid_14 extends _i1.Fake implements _i12.Uuid {}

class _FakeEither_15<L, R> extends _i1.Fake implements _i13.Either<L, R> {}

class _FakeUuidValue_16 extends _i1.Fake implements _i12.UuidValue {}

class _FakeLocalNotesRepository_17 extends _i1.Fake
    implements _i14.LocalNotesRepository {}

class _FakeLocalNotesState_18 extends _i1.Fake implements _i15.LocalNotesState {
}

class _FakeGetPostsRepository_19 extends _i1.Fake
    implements _i16.GetPostsRepository {}

class _FakeInfiniteListState_20 extends _i1.Fake
    implements _i17.InfiniteListState {}

/// A class which mocks [ThemeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeCubit extends _i1.Mock implements _i3.ThemeCubit {
  MockThemeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddThemeRepository get addThemeRepository =>
      (super.noSuchMethod(Invocation.getter(#addThemeRepository),
          returnValue: _FakeAddThemeRepository_0()) as _i2.AddThemeRepository);
  @override
  _i3.ThemeState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeThemeState_1()) as _i3.ThemeState);
  @override
  _i18.Stream<_i3.ThemeState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.ThemeState>.empty())
          as _i18.Stream<_i3.ThemeState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void toggleTheme(bool? isDark) =>
      super.noSuchMethod(Invocation.method(#toggleTheme, [isDark]),
          returnValueForMissingStub: null);
  @override
  void getTheme() => super.noSuchMethod(Invocation.method(#getTheme, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i3.ThemeState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i19.Change<_i3.ThemeState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i4.HiveInterface {
  MockHiveInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(String? path,
          {_i4.HiveStorageBackendPreference? backendPreference =
              _i4.HiveStorageBackendPreference.native}) =>
      super.noSuchMethod(
          Invocation.method(
              #init, [path], {#backendPreference: backendPreference}),
          returnValueForMissingStub: null);
  @override
  _i18.Future<_i4.Box<E>> openBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i20.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i21.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          _i22.Uint8List? bytes,
          String? collection,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #bytes: bytes,
                #collection: collection,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.Box<E>>.value(_FakeBox_2<E>()))
          as _i18.Future<_i4.Box<E>>);
  @override
  _i18.Future<_i4.LazyBox<E>> openLazyBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i20.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i21.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          String? collection,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openLazyBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #collection: collection,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.LazyBox<E>>.value(_FakeLazyBox_3<E>()))
          as _i18.Future<_i4.LazyBox<E>>);
  @override
  _i4.Box<E> box<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#box, [name]),
          returnValue: _FakeBox_2<E>()) as _i4.Box<E>);
  @override
  _i4.LazyBox<E> lazyBox<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#lazyBox, [name]),
          returnValue: _FakeLazyBox_3<E>()) as _i4.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) =>
      (super.noSuchMethod(Invocation.method(#isBoxOpen, [name]),
          returnValue: false) as bool);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> deleteBoxFromDisk(String? name, {String? path}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteBoxFromDisk, [name], {#path: path}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i18.Future<void>);
  @override
  _i18.Future<void> deleteFromDisk() => (super.noSuchMethod(
      Invocation.method(#deleteFromDisk, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  List<int> generateSecureKey() =>
      (super.noSuchMethod(Invocation.method(#generateSecureKey, []),
          returnValue: <int>[]) as List<int>);
  @override
  _i18.Future<bool> boxExists(String? name, {String? path}) =>
      (super.noSuchMethod(Invocation.method(#boxExists, [name], {#path: path}),
          returnValue: Future<bool>.value(false)) as _i18.Future<bool>);
  @override
  void registerAdapter<T>(_i4.TypeAdapter<T>? adapter,
          {bool? internal = false, bool? override = false}) =>
      super.noSuchMethod(
          Invocation.method(#registerAdapter, [adapter],
              {#internal: internal, #override: override}),
          returnValueForMissingStub: null);
  @override
  bool isAdapterRegistered(int? typeId) =>
      (super.noSuchMethod(Invocation.method(#isAdapterRegistered, [typeId]),
          returnValue: false) as bool);
  @override
  void ignoreTypeId<T>(int? typeId) =>
      super.noSuchMethod(Invocation.method(#ignoreTypeId, [typeId]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AddThemeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddThemeRepository extends _i1.Mock
    implements _i2.AddThemeRepository {
  MockAddThemeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(Invocation.getter(#hive),
      returnValue: _FakeHiveInterface_4()) as _i4.HiveInterface);
  @override
  _i18.Future<void> addTheme(bool? isDark) => (super.noSuchMethod(
      Invocation.method(#addTheme, [isDark]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<bool> getSavedTheme() =>
      (super.noSuchMethod(Invocation.method(#getSavedTheme, []),
          returnValue: Future<bool>.value(false)) as _i18.Future<bool>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i4.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i18.Stream<_i4.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
      Invocation.method(#watch, [], {#key: key}),
      returnValue: Stream<_i4.BoxEvent>.empty()) as _i18.Stream<_i4.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i18.Future<void> put(dynamic key, E? value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> putAt(int? index, E? value) => (super.noSuchMethod(
      Invocation.method(#putAt, [index, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
      Invocation.method(#putAll, [entries]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: Future<int>.value(0)) as _i18.Future<int>);
  @override
  _i18.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: Future<Iterable<int>>.value(<int>[]))
          as _i18.Future<Iterable<int>>);
  @override
  _i18.Future<void> delete(dynamic key) => (super.noSuchMethod(
      Invocation.method(#delete, [key]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> deleteAt(int? index) => (super.noSuchMethod(
      Invocation.method(#deleteAt, [index]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
      Invocation.method(#deleteAll, [keys]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> compact() => (super.noSuchMethod(
      Invocation.method(#compact, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<int>.value(0)) as _i18.Future<int>);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> deleteFromDisk() => (super.noSuchMethod(
      Invocation.method(#deleteFromDisk, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> flush() => (super.noSuchMethod(
      Invocation.method(#flush, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
}

/// A class which mocks [LanguageCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageCubit extends _i1.Mock implements _i6.LanguageCubit {
  MockLanguageCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.LanguageRepository get languageRepository =>
      (super.noSuchMethod(Invocation.getter(#languageRepository),
          returnValue: _FakeLanguageRepository_5()) as _i5.LanguageRepository);
  @override
  _i6.LanguageState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeLanguageState_6()) as _i6.LanguageState);
  @override
  _i18.Stream<_i6.LanguageState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i6.LanguageState>.empty())
          as _i18.Stream<_i6.LanguageState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void toggle(String? languageCode) =>
      super.noSuchMethod(Invocation.method(#toggle, [languageCode]),
          returnValueForMissingStub: null);
  @override
  void getLang() => super.noSuchMethod(Invocation.method(#getLang, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i6.LanguageState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i19.Change<_i6.LanguageState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
}

/// A class which mocks [LanguageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageRepository extends _i1.Mock
    implements _i5.LanguageRepository {
  MockLanguageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(Invocation.getter(#hive),
      returnValue: _FakeHiveInterface_4()) as _i4.HiveInterface);
  @override
  _i18.Future<void> addLanguage(String? languageCode) => (super.noSuchMethod(
      Invocation.method(#addLanguage, [languageCode]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<String> getSavedLanguage() =>
      (super.noSuchMethod(Invocation.method(#getSavedLanguage, []),
          returnValue: Future<String>.value('')) as _i18.Future<String>);
}

/// A class which mocks [LanguageEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageEntity extends _i1.Mock implements _i23.LanguageEntity {
  MockLanguageEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get languageCode =>
      (super.noSuchMethod(Invocation.getter(#languageCode), returnValue: '')
          as String);
  @override
  String get languageName =>
      (super.noSuchMethod(Invocation.getter(#languageName), returnValue: '')
          as String);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}

/// A class which mocks [NetworkAudioBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkAudioBloc extends _i1.Mock implements _i8.NetworkAudioBloc {
  MockNetworkAudioBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AudioPlayer get audioPlayer =>
      (super.noSuchMethod(Invocation.getter(#audioPlayer),
          returnValue: _FakeAudioPlayer_7()) as _i7.AudioPlayer);
  @override
  set audioPlayer(_i7.AudioPlayer? _audioPlayer) =>
      super.noSuchMethod(Invocation.setter(#audioPlayer, _audioPlayer),
          returnValueForMissingStub: null);
  @override
  _i8.NetworkAudioState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeNetworkAudioState_8()) as _i8.NetworkAudioState);
  @override
  _i18.Stream<_i8.NetworkAudioState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i8.NetworkAudioState>.empty())
          as _i18.Stream<_i8.NetworkAudioState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.NetworkrAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.NetworkrAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i8.NetworkAudioState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.NetworkrAudioEvent>(
          _i19.EventHandler<E, _i8.NetworkAudioState>? handler,
          {_i19.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i19.Transition<_i8.NetworkrAudioEvent, _i8.NetworkAudioState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i8.NetworkAudioState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AssetAudioBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetAudioBloc extends _i1.Mock implements _i9.AssetAudioBloc {
  MockAssetAudioBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AudioPlayer get audioPlayer =>
      (super.noSuchMethod(Invocation.getter(#audioPlayer),
          returnValue: _FakeAudioPlayer_7()) as _i7.AudioPlayer);
  @override
  set audioPlayer(_i7.AudioPlayer? _audioPlayer) =>
      super.noSuchMethod(Invocation.setter(#audioPlayer, _audioPlayer),
          returnValueForMissingStub: null);
  @override
  _i7.AudioCache get audioCache =>
      (super.noSuchMethod(Invocation.getter(#audioCache),
          returnValue: _FakeAudioCache_9()) as _i7.AudioCache);
  @override
  set audioCache(_i7.AudioCache? _audioCache) =>
      super.noSuchMethod(Invocation.setter(#audioCache, _audioCache),
          returnValueForMissingStub: null);
  @override
  _i9.AssetAudioState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeAssetAudioState_10()) as _i9.AssetAudioState);
  @override
  _i18.Stream<_i9.AssetAudioState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i9.AssetAudioState>.empty())
          as _i18.Stream<_i9.AssetAudioState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i9.AssetAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.AssetAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i9.AssetAudioState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.AssetAudioEvent>(
          _i19.EventHandler<E, _i9.AssetAudioState>? handler,
          {_i19.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i19.Transition<_i9.AssetAudioEvent, _i9.AssetAudioState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i9.AssetAudioState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DeviceAudioBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceAudioBloc extends _i1.Mock implements _i10.DeviceAudioBloc {
  MockDeviceAudioBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AudioPlayer get audioPlayer =>
      (super.noSuchMethod(Invocation.getter(#audioPlayer),
          returnValue: _FakeAudioPlayer_7()) as _i7.AudioPlayer);
  @override
  set audioPlayer(_i7.AudioPlayer? _audioPlayer) =>
      super.noSuchMethod(Invocation.setter(#audioPlayer, _audioPlayer),
          returnValueForMissingStub: null);
  @override
  _i10.DeviceAudioState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeDeviceAudioState_11()) as _i10.DeviceAudioState);
  @override
  _i18.Stream<_i10.DeviceAudioState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.DeviceAudioState>.empty())
          as _i18.Stream<_i10.DeviceAudioState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i10.DeviceAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.DeviceAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i10.DeviceAudioState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i10.DeviceAudioEvent>(
          _i19.EventHandler<E, _i10.DeviceAudioState>? handler,
          {_i19.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i19.Transition<_i10.DeviceAudioEvent, _i10.DeviceAudioState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i10.DeviceAudioState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i7.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AudioCache get audioCache =>
      (super.noSuchMethod(Invocation.getter(#audioCache),
          returnValue: _FakeAudioCache_9()) as _i7.AudioCache);
  @override
  set audioCache(_i7.AudioCache? _audioCache) =>
      super.noSuchMethod(Invocation.setter(#audioCache, _audioCache),
          returnValueForMissingStub: null);
  @override
  String get playerId =>
      (super.noSuchMethod(Invocation.getter(#playerId), returnValue: '')
          as String);
  @override
  _i7.PlayerState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i7.PlayerState.stopped) as _i7.PlayerState);
  @override
  set state(_i7.PlayerState? state) =>
      super.noSuchMethod(Invocation.setter(#state, state),
          returnValueForMissingStub: null);
  @override
  _i18.Stream<_i7.PlayerState> get onPlayerStateChanged =>
      (super.noSuchMethod(Invocation.getter(#onPlayerStateChanged),
              returnValue: Stream<_i7.PlayerState>.empty())
          as _i18.Stream<_i7.PlayerState>);
  @override
  _i18.Stream<Duration> get onPositionChanged =>
      (super.noSuchMethod(Invocation.getter(#onPositionChanged),
          returnValue: Stream<Duration>.empty()) as _i18.Stream<Duration>);
  @override
  _i18.Stream<Duration> get onDurationChanged =>
      (super.noSuchMethod(Invocation.getter(#onDurationChanged),
          returnValue: Stream<Duration>.empty()) as _i18.Stream<Duration>);
  @override
  _i18.Stream<void> get onPlayerComplete =>
      (super.noSuchMethod(Invocation.getter(#onPlayerComplete),
          returnValue: Stream<void>.empty()) as _i18.Stream<void>);
  @override
  _i18.Stream<void> get onSeekComplete =>
      (super.noSuchMethod(Invocation.getter(#onSeekComplete),
          returnValue: Stream<void>.empty()) as _i18.Stream<void>);
  @override
  _i7.PlayerMode get mode => (super.noSuchMethod(Invocation.getter(#mode),
      returnValue: _i7.PlayerMode.mediaPlayer) as _i7.PlayerMode);
  @override
  _i7.ReleaseMode get releaseMode =>
      (super.noSuchMethod(Invocation.getter(#releaseMode),
          returnValue: _i7.ReleaseMode.release) as _i7.ReleaseMode);
  @override
  _i18.Future<void> play(_i7.Source? source,
          {double? volume,
          _i7.AudioContext? ctx,
          Duration? position,
          _i7.PlayerMode? mode}) =>
      (super.noSuchMethod(
              Invocation.method(#play, [
                source
              ], {
                #volume: volume,
                #ctx: ctx,
                #position: position,
                #mode: mode
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i18.Future<void>);
  @override
  _i18.Future<void> setAudioContext(_i7.AudioContext? ctx) =>
      (super.noSuchMethod(Invocation.method(#setAudioContext, [ctx]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i18.Future<void>);
  @override
  _i18.Future<void> setPlayerMode(_i7.PlayerMode? mode) => (super.noSuchMethod(
      Invocation.method(#setPlayerMode, [mode]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> pause() => (super.noSuchMethod(
      Invocation.method(#pause, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> stop() => (super.noSuchMethod(Invocation.method(#stop, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> resume() => (super.noSuchMethod(
      Invocation.method(#resume, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> release() => (super.noSuchMethod(
      Invocation.method(#release, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> seek(Duration? position) => (super.noSuchMethod(
      Invocation.method(#seek, [position]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> setVolume(double? volume) => (super.noSuchMethod(
      Invocation.method(#setVolume, [volume]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> setReleaseMode(_i7.ReleaseMode? releaseMode) =>
      (super.noSuchMethod(Invocation.method(#setReleaseMode, [releaseMode]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i18.Future<void>);
  @override
  _i18.Future<void> setPlaybackRate(double? playbackRate) =>
      (super.noSuchMethod(Invocation.method(#setPlaybackRate, [playbackRate]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i18.Future<void>);
  @override
  _i18.Future<void> setSource(_i7.Source? source) => (super.noSuchMethod(
      Invocation.method(#setSource, [source]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> setSourceUrl(String? url) => (super.noSuchMethod(
      Invocation.method(#setSourceUrl, [url]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> setSourceDeviceFile(String? path) => (super.noSuchMethod(
      Invocation.method(#setSourceDeviceFile, [path]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> setSourceAsset(String? path) => (super.noSuchMethod(
      Invocation.method(#setSourceAsset, [path]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> setSourceBytes(_i22.Uint8List? bytes) =>
      (super.noSuchMethod(Invocation.method(#setSourceBytes, [bytes]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i18.Future<void>);
  @override
  _i18.Future<Duration?> getDuration() =>
      (super.noSuchMethod(Invocation.method(#getDuration, []),
          returnValue: Future<Duration?>.value()) as _i18.Future<Duration?>);
  @override
  _i18.Future<Duration?> getCurrentPosition() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPosition, []),
          returnValue: Future<Duration?>.value()) as _i18.Future<Duration?>);
  @override
  _i18.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
}

/// A class which mocks [AudioCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioCache extends _i1.Mock implements _i7.AudioCache {
  MockAudioCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, Uri> get loadedFiles =>
      (super.noSuchMethod(Invocation.getter(#loadedFiles),
          returnValue: <String, Uri>{}) as Map<String, Uri>);
  @override
  set loadedFiles(Map<String, Uri>? _loadedFiles) =>
      super.noSuchMethod(Invocation.setter(#loadedFiles, _loadedFiles),
          returnValueForMissingStub: null);
  @override
  String get prefix =>
      (super.noSuchMethod(Invocation.getter(#prefix), returnValue: '')
          as String);
  @override
  set prefix(String? _prefix) =>
      super.noSuchMethod(Invocation.setter(#prefix, _prefix),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> clear(Uri? fileName) => (super.noSuchMethod(
      Invocation.method(#clear, [fileName]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> clearAll() => (super.noSuchMethod(
      Invocation.method(#clearAll, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<Uri> fetchToMemory(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#fetchToMemory, [fileName]),
          returnValue: Future<Uri>.value(_FakeUri_12())) as _i18.Future<Uri>);
  @override
  _i18.Future<Uri> load(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#load, [fileName]),
          returnValue: Future<Uri>.value(_FakeUri_12())) as _i18.Future<Uri>);
  @override
  _i18.Future<_i11.File> loadAsFile(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#loadAsFile, [fileName]),
              returnValue: Future<_i11.File>.value(_FakeFile_13()))
          as _i18.Future<_i11.File>);
  @override
  _i18.Future<_i22.Uint8List> loadAsBytes(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#loadAsBytes, [fileName]),
              returnValue: Future<_i22.Uint8List>.value(_i22.Uint8List(0)))
          as _i18.Future<_i22.Uint8List>);
  @override
  _i18.Future<List<Uri>> loadAll(List<String>? fileNames) =>
      (super.noSuchMethod(Invocation.method(#loadAll, [fileNames]),
              returnValue: Future<List<Uri>>.value(<Uri>[]))
          as _i18.Future<List<Uri>>);
}

/// A class which mocks [LocalNoteEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNoteEntity extends _i1.Mock implements _i24.LocalNoteEntity {
  MockLocalNoteEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  set title(String? _title) =>
      super.noSuchMethod(Invocation.setter(#title, _title),
          returnValueForMissingStub: null);
  @override
  String get descripion =>
      (super.noSuchMethod(Invocation.getter(#descripion), returnValue: '')
          as String);
  @override
  set descripion(String? _descripion) =>
      super.noSuchMethod(Invocation.setter(#descripion, _descripion),
          returnValueForMissingStub: null);
  @override
  bool get isInBox =>
      (super.noSuchMethod(Invocation.getter(#isInBox), returnValue: false)
          as bool);
  @override
  _i18.Future<void> save() => (super.noSuchMethod(Invocation.method(#save, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  _i18.Future<void> delete() => (super.noSuchMethod(
      Invocation.method(#delete, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
}

/// A class which mocks [LocalNotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNotesRepository extends _i1.Mock
    implements _i14.LocalNotesRepository {
  MockLocalNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(Invocation.getter(#hive),
      returnValue: _FakeHiveInterface_4()) as _i4.HiveInterface);
  @override
  _i12.Uuid get uuid =>
      (super.noSuchMethod(Invocation.getter(#uuid), returnValue: _FakeUuid_14())
          as _i12.Uuid);
  @override
  _i18.Future<_i13.Either<String, _i13.Unit>> addNote(
          {_i24.LocalNoteEntity? localNoteEntity}) =>
      (super.noSuchMethod(
          Invocation.method(#addNote, [], {#localNoteEntity: localNoteEntity}),
          returnValue: Future<_i13.Either<String, _i13.Unit>>.value(
              _FakeEither_15<String, _i13.Unit>())) as _i18
          .Future<_i13.Either<String, _i13.Unit>>);
  @override
  _i18.Future<_i13.Either<String, List<_i24.LocalNoteEntity>>>
      getLocalNotes() => (super.noSuchMethod(
              Invocation.method(#getLocalNotes, []),
              returnValue:
                  Future<_i13.Either<String, List<_i24.LocalNoteEntity>>>.value(
                      _FakeEither_15<String, List<_i24.LocalNoteEntity>>()))
          as _i18.Future<_i13.Either<String, List<_i24.LocalNoteEntity>>>);
  @override
  _i18.Future<_i13.Either<String, _i13.Unit>> editData(
          {dynamic key, _i24.LocalNoteEntity? localNoteEntity}) =>
      (super.noSuchMethod(
          Invocation.method(
              #editData, [], {#key: key, #localNoteEntity: localNoteEntity}),
          returnValue: Future<_i13.Either<String, _i13.Unit>>.value(
              _FakeEither_15<String, _i13.Unit>())) as _i18
          .Future<_i13.Either<String, _i13.Unit>>);
  @override
  _i18.Future<_i13.Either<String, _i13.Unit>> deleteData({dynamic key}) =>
      (super.noSuchMethod(Invocation.method(#deleteData, [], {#key: key}),
              returnValue: Future<_i13.Either<String, _i13.Unit>>.value(
                  _FakeEither_15<String, _i13.Unit>()))
          as _i18.Future<_i13.Either<String, _i13.Unit>>);
  @override
  void checkAdpRegistered() =>
      super.noSuchMethod(Invocation.method(#checkAdpRegistered, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Uuid].
///
/// See the documentation for Mockito's code generation for more information.
class MockUuid extends _i1.Mock implements _i12.Uuid {
  MockUuid() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String v1({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v1, [], {#options: options}),
          returnValue: '') as String);
  @override
  List<int> v1buffer(List<int>? buffer,
          {Map<String, dynamic>? options, int? offset = 0}) =>
      (super.noSuchMethod(
          Invocation.method(
              #v1buffer, [buffer], {#options: options, #offset: offset}),
          returnValue: <int>[]) as List<int>);
  @override
  _i12.UuidValue v1obj({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v1obj, [], {#options: options}),
          returnValue: _FakeUuidValue_16()) as _i12.UuidValue);
  @override
  String v4({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v4, [], {#options: options}),
          returnValue: '') as String);
  @override
  List<int> v4buffer(List<int>? buffer,
          {Map<String, dynamic>? options, int? offset = 0}) =>
      (super.noSuchMethod(
          Invocation.method(
              #v4buffer, [buffer], {#options: options, #offset: offset}),
          returnValue: <int>[]) as List<int>);
  @override
  _i12.UuidValue v4obj({Map<String, dynamic>? options}) =>
      (super.noSuchMethod(Invocation.method(#v4obj, [], {#options: options}),
          returnValue: _FakeUuidValue_16()) as _i12.UuidValue);
  @override
  String v5(String? namespace, String? name, {Map<String, dynamic>? options}) =>
      (super.noSuchMethod(
          Invocation.method(#v5, [namespace, name], {#options: options}),
          returnValue: '') as String);
  @override
  List<int> v5buffer(String? namespace, String? name, List<int>? buffer,
          {Map<String, dynamic>? options, int? offset = 0}) =>
      (super.noSuchMethod(
          Invocation.method(#v5buffer, [namespace, name, buffer],
              {#options: options, #offset: offset}),
          returnValue: <int>[]) as List<int>);
  @override
  _i12.UuidValue v5obj(String? namespace, String? name,
          {Map<String, dynamic>? options}) =>
      (super.noSuchMethod(
          Invocation.method(#v5obj, [namespace, name], {#options: options}),
          returnValue: _FakeUuidValue_16()) as _i12.UuidValue);
}

/// A class which mocks [LocalNotesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalNotesBloc extends _i1.Mock implements _i15.LocalNotesBloc {
  MockLocalNotesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.LocalNotesRepository get localNotesRepository =>
      (super.noSuchMethod(Invocation.getter(#localNotesRepository),
              returnValue: _FakeLocalNotesRepository_17())
          as _i14.LocalNotesRepository);
  @override
  _i15.LocalNotesState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeLocalNotesState_18()) as _i15.LocalNotesState);
  @override
  _i18.Stream<_i15.LocalNotesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i15.LocalNotesState>.empty())
          as _i18.Stream<_i15.LocalNotesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i15.LocalNotesEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i15.LocalNotesEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i15.LocalNotesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i15.LocalNotesEvent>(
          _i19.EventHandler<E, _i15.LocalNotesState>? handler,
          {_i19.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i19.Transition<_i15.LocalNotesEvent, _i15.LocalNotesState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i15.LocalNotesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [HiveError].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveError extends _i1.Mock implements _i4.HiveError {
  MockHiveError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
}

/// A class which mocks [GetPostsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPostsRepository extends _i1.Mock
    implements _i16.GetPostsRepository {
  MockGetPostsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i13.Either<String, List<_i25.PostModel>>> getPosts(
          {int? page}) =>
      (super.noSuchMethod(Invocation.method(#getPosts, [], {#page: page}),
          returnValue: Future<_i13.Either<String, List<_i25.PostModel>>>.value(
              _FakeEither_15<String, List<_i25.PostModel>>())) as _i18
          .Future<_i13.Either<String, List<_i25.PostModel>>>);
}

/// A class which mocks [InfiniteListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockInfiniteListBloc extends _i1.Mock implements _i17.InfiniteListBloc {
  MockInfiniteListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.GetPostsRepository get getPosts => (super.noSuchMethod(
      Invocation.getter(#getPosts),
      returnValue: _FakeGetPostsRepository_19()) as _i16.GetPostsRepository);
  @override
  set getPosts(_i16.GetPostsRepository? _getPosts) =>
      super.noSuchMethod(Invocation.setter(#getPosts, _getPosts),
          returnValueForMissingStub: null);
  @override
  int get page =>
      (super.noSuchMethod(Invocation.getter(#page), returnValue: 0) as int);
  @override
  set page(int? _page) => super.noSuchMethod(Invocation.setter(#page, _page),
      returnValueForMissingStub: null);
  @override
  _i17.InfiniteListState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeInfiniteListState_20()) as _i17.InfiniteListState);
  @override
  _i18.Stream<_i17.InfiniteListState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i17.InfiniteListState>.empty())
          as _i18.Stream<_i17.InfiniteListState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i17.InfiniteListEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i17.InfiniteListEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i17.InfiniteListState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i17.InfiniteListEvent>(
          _i19.EventHandler<E, _i17.InfiniteListState>? handler,
          {_i19.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i19.Transition<_i17.InfiniteListEvent, _i17.InfiniteListState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i17.InfiniteListState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
