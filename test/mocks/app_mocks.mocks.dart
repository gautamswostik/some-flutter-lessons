// Mocks generated by Mockito 5.1.0 from annotations
// in fluuter_boilerplate/test/mocks/app_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i13;
import 'dart:io' as _i12;
import 'dart:typed_data' as _i17;

import 'package:audioplayers/audioplayers.dart' as _i7;
import 'package:audioplayers/src/notifications/notification_service.dart'
    as _i11;
import 'package:bloc/bloc.dart' as _i14;
import 'package:fluuter_boilerplate/app_setup/languages/entity/language_entity.dart'
    as _i18;
import 'package:fluuter_boilerplate/application/app_theme/theme_cubit.dart'
    as _i3;
import 'package:fluuter_boilerplate/application/asset_audio/assetaudio_bloc.dart'
    as _i9;
import 'package:fluuter_boilerplate/application/devide_audio/deviceaudio_bloc.dart'
    as _i10;
import 'package:fluuter_boilerplate/application/languages/language_cubit.dart'
    as _i6;
import 'package:fluuter_boilerplate/application/network_radio/networkradio_bloc.dart'
    as _i8;
import 'package:fluuter_boilerplate/infrastructure/language_repo/language_repo.dart'
    as _i5;
import 'package:fluuter_boilerplate/infrastructure/theme_repo/theme_repo.dart'
    as _i2;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i16;
import 'package:hive/src/box/default_key_comparator.dart' as _i15;
import 'package:hive_flutter/hive_flutter.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAddThemeRepository_0 extends _i1.Fake
    implements _i2.AddThemeRepository {}

class _FakeThemeState_1 extends _i1.Fake implements _i3.ThemeState {}

class _FakeBox_2<E> extends _i1.Fake implements _i4.Box<E> {}

class _FakeLazyBox_3<E> extends _i1.Fake implements _i4.LazyBox<E> {}

class _FakeHiveInterface_4 extends _i1.Fake implements _i4.HiveInterface {}

class _FakeLanguageRepository_5 extends _i1.Fake
    implements _i5.LanguageRepository {}

class _FakeLanguageState_6 extends _i1.Fake implements _i6.LanguageState {}

class _FakeAudioPlayer_7 extends _i1.Fake implements _i7.AudioPlayer {}

class _FakeNetworkAudioState_8 extends _i1.Fake
    implements _i8.NetworkAudioState {}

class _FakeAudioCache_9 extends _i1.Fake implements _i7.AudioCache {}

class _FakeAssetAudioState_10 extends _i1.Fake implements _i9.AssetAudioState {}

class _FakeDeviceAudioState_11 extends _i1.Fake
    implements _i10.DeviceAudioState {}

class _FakeNotificationService_12 extends _i1.Fake
    implements _i11.NotificationService {}

class _FakeUri_13 extends _i1.Fake implements Uri {}

class _FakeFile_14 extends _i1.Fake implements _i12.File {}

/// A class which mocks [ThemeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeCubit extends _i1.Mock implements _i3.ThemeCubit {
  MockThemeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddThemeRepository get addThemeRepository =>
      (super.noSuchMethod(Invocation.getter(#addThemeRepository),
          returnValue: _FakeAddThemeRepository_0()) as _i2.AddThemeRepository);
  @override
  _i3.ThemeState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeThemeState_1()) as _i3.ThemeState);
  @override
  _i13.Stream<_i3.ThemeState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.ThemeState>.empty())
          as _i13.Stream<_i3.ThemeState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void toggleTheme(bool? isDark) =>
      super.noSuchMethod(Invocation.method(#toggleTheme, [isDark]),
          returnValueForMissingStub: null);
  @override
  void getTheme() => super.noSuchMethod(Invocation.method(#getTheme, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i3.ThemeState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i14.Change<_i3.ThemeState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i4.HiveInterface {
  MockHiveInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(String? path) =>
      super.noSuchMethod(Invocation.method(#init, [path]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<_i4.Box<E>> openBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i15.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i16.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          _i17.Uint8List? bytes,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #bytes: bytes,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.Box<E>>.value(_FakeBox_2<E>()))
          as _i13.Future<_i4.Box<E>>);
  @override
  _i13.Future<_i4.LazyBox<E>> openLazyBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i15.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i16.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openLazyBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.LazyBox<E>>.value(_FakeLazyBox_3<E>()))
          as _i13.Future<_i4.LazyBox<E>>);
  @override
  _i4.Box<E> box<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#box, [name]),
          returnValue: _FakeBox_2<E>()) as _i4.Box<E>);
  @override
  _i4.LazyBox<E> lazyBox<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#lazyBox, [name]),
          returnValue: _FakeLazyBox_3<E>()) as _i4.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) =>
      (super.noSuchMethod(Invocation.method(#isBoxOpen, [name]),
          returnValue: false) as bool);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> deleteBoxFromDisk(String? name, {String? path}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteBoxFromDisk, [name], {#path: path}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> deleteFromDisk() => (super.noSuchMethod(
      Invocation.method(#deleteFromDisk, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  List<int> generateSecureKey() =>
      (super.noSuchMethod(Invocation.method(#generateSecureKey, []),
          returnValue: <int>[]) as List<int>);
  @override
  _i13.Future<bool> boxExists(String? name, {String? path}) =>
      (super.noSuchMethod(Invocation.method(#boxExists, [name], {#path: path}),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  void registerAdapter<T>(_i4.TypeAdapter<T>? adapter,
          {bool? internal = false, bool? override = false}) =>
      super.noSuchMethod(
          Invocation.method(#registerAdapter, [adapter],
              {#internal: internal, #override: override}),
          returnValueForMissingStub: null);
  @override
  bool isAdapterRegistered(int? typeId) =>
      (super.noSuchMethod(Invocation.method(#isAdapterRegistered, [typeId]),
          returnValue: false) as bool);
  @override
  void ignoreTypeId<T>(int? typeId) =>
      super.noSuchMethod(Invocation.method(#ignoreTypeId, [typeId]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AddThemeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddThemeRepository extends _i1.Mock
    implements _i2.AddThemeRepository {
  MockAddThemeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(Invocation.getter(#hive),
      returnValue: _FakeHiveInterface_4()) as _i4.HiveInterface);
  @override
  _i13.Future<void> addTheme(bool? isDark) => (super.noSuchMethod(
      Invocation.method(#addTheme, [isDark]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<bool> getSavedTheme() =>
      (super.noSuchMethod(Invocation.method(#getSavedTheme, []),
          returnValue: Future<bool>.value(false)) as _i13.Future<bool>);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i4.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i13.Stream<_i4.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
      Invocation.method(#watch, [], {#key: key}),
      returnValue: Stream<_i4.BoxEvent>.empty()) as _i13.Stream<_i4.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i13.Future<void> put(dynamic key, E? value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> putAt(int? index, E? value) => (super.noSuchMethod(
      Invocation.method(#putAt, [index, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
      Invocation.method(#putAll, [entries]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: Future<Iterable<int>>.value(<int>[]))
          as _i13.Future<Iterable<int>>);
  @override
  _i13.Future<void> delete(dynamic key) => (super.noSuchMethod(
      Invocation.method(#delete, [key]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> deleteAt(int? index) => (super.noSuchMethod(
      Invocation.method(#deleteAt, [index]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
      Invocation.method(#deleteAll, [keys]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> compact() => (super.noSuchMethod(
      Invocation.method(#compact, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> deleteFromDisk() => (super.noSuchMethod(
      Invocation.method(#deleteFromDisk, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> flush() => (super.noSuchMethod(
      Invocation.method(#flush, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
}

/// A class which mocks [LanguageCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageCubit extends _i1.Mock implements _i6.LanguageCubit {
  MockLanguageCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.LanguageRepository get languageRepository =>
      (super.noSuchMethod(Invocation.getter(#languageRepository),
          returnValue: _FakeLanguageRepository_5()) as _i5.LanguageRepository);
  @override
  _i6.LanguageState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeLanguageState_6()) as _i6.LanguageState);
  @override
  _i13.Stream<_i6.LanguageState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i6.LanguageState>.empty())
          as _i13.Stream<_i6.LanguageState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void toggle(String? languageCode) =>
      super.noSuchMethod(Invocation.method(#toggle, [languageCode]),
          returnValueForMissingStub: null);
  @override
  void getLang() => super.noSuchMethod(Invocation.method(#getLang, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i6.LanguageState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i14.Change<_i6.LanguageState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
}

/// A class which mocks [LanguageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageRepository extends _i1.Mock
    implements _i5.LanguageRepository {
  MockLanguageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HiveInterface get hive => (super.noSuchMethod(Invocation.getter(#hive),
      returnValue: _FakeHiveInterface_4()) as _i4.HiveInterface);
  @override
  _i13.Future<void> addLanguage(String? languageCode) => (super.noSuchMethod(
      Invocation.method(#addLanguage, [languageCode]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<String> getSavedLanguage() =>
      (super.noSuchMethod(Invocation.method(#getSavedLanguage, []),
          returnValue: Future<String>.value('')) as _i13.Future<String>);
}

/// A class which mocks [LanguageEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageEntity extends _i1.Mock implements _i18.LanguageEntity {
  MockLanguageEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get languageCode =>
      (super.noSuchMethod(Invocation.getter(#languageCode), returnValue: '')
          as String);
  @override
  String get languageName =>
      (super.noSuchMethod(Invocation.getter(#languageName), returnValue: '')
          as String);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
}

/// A class which mocks [NetworkAudioBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkAudioBloc extends _i1.Mock implements _i8.NetworkAudioBloc {
  MockNetworkAudioBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AudioPlayer get audioPlayer =>
      (super.noSuchMethod(Invocation.getter(#audioPlayer),
          returnValue: _FakeAudioPlayer_7()) as _i7.AudioPlayer);
  @override
  set audioPlayer(_i7.AudioPlayer? _audioPlayer) =>
      super.noSuchMethod(Invocation.setter(#audioPlayer, _audioPlayer),
          returnValueForMissingStub: null);
  @override
  _i8.NetworkAudioState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeNetworkAudioState_8()) as _i8.NetworkAudioState);
  @override
  _i13.Stream<_i8.NetworkAudioState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i8.NetworkAudioState>.empty())
          as _i13.Stream<_i8.NetworkAudioState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.NetworkrAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.NetworkrAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i8.NetworkAudioState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.NetworkrAudioEvent>(
          _i14.EventHandler<E, _i8.NetworkAudioState>? handler,
          {_i14.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i14.Transition<_i8.NetworkrAudioEvent, _i8.NetworkAudioState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  void onChange(_i14.Change<_i8.NetworkAudioState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AssetAudioBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetAudioBloc extends _i1.Mock implements _i9.AssetAudioBloc {
  MockAssetAudioBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AudioPlayer get audioPlayer =>
      (super.noSuchMethod(Invocation.getter(#audioPlayer),
          returnValue: _FakeAudioPlayer_7()) as _i7.AudioPlayer);
  @override
  set audioPlayer(_i7.AudioPlayer? _audioPlayer) =>
      super.noSuchMethod(Invocation.setter(#audioPlayer, _audioPlayer),
          returnValueForMissingStub: null);
  @override
  _i7.AudioCache get audioCache =>
      (super.noSuchMethod(Invocation.getter(#audioCache),
          returnValue: _FakeAudioCache_9()) as _i7.AudioCache);
  @override
  set audioCache(_i7.AudioCache? _audioCache) =>
      super.noSuchMethod(Invocation.setter(#audioCache, _audioCache),
          returnValueForMissingStub: null);
  @override
  _i9.AssetAudioState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeAssetAudioState_10()) as _i9.AssetAudioState);
  @override
  _i13.Stream<_i9.AssetAudioState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i9.AssetAudioState>.empty())
          as _i13.Stream<_i9.AssetAudioState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i9.AssetAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.AssetAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i9.AssetAudioState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.AssetAudioEvent>(
          _i14.EventHandler<E, _i9.AssetAudioState>? handler,
          {_i14.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i14.Transition<_i9.AssetAudioEvent, _i9.AssetAudioState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  void onChange(_i14.Change<_i9.AssetAudioState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DeviceAudioBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceAudioBloc extends _i1.Mock implements _i10.DeviceAudioBloc {
  MockDeviceAudioBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.AudioPlayer get audioPlayer =>
      (super.noSuchMethod(Invocation.getter(#audioPlayer),
          returnValue: _FakeAudioPlayer_7()) as _i7.AudioPlayer);
  @override
  set audioPlayer(_i7.AudioPlayer? _audioPlayer) =>
      super.noSuchMethod(Invocation.setter(#audioPlayer, _audioPlayer),
          returnValueForMissingStub: null);
  @override
  _i10.DeviceAudioState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeDeviceAudioState_11()) as _i10.DeviceAudioState);
  @override
  _i13.Stream<_i10.DeviceAudioState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i10.DeviceAudioState>.empty())
          as _i13.Stream<_i10.DeviceAudioState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i10.DeviceAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i10.DeviceAudioEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i10.DeviceAudioState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i10.DeviceAudioEvent>(
          _i14.EventHandler<E, _i10.DeviceAudioState>? handler,
          {_i14.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i14.Transition<_i10.DeviceAudioEvent, _i10.DeviceAudioState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  void onChange(_i14.Change<_i10.DeviceAudioState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i7.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.NotificationService get notificationService => (super.noSuchMethod(
      Invocation.getter(#notificationService),
      returnValue: _FakeNotificationService_12()) as _i11.NotificationService);
  @override
  set notificationService(_i11.NotificationService? _notificationService) =>
      super.noSuchMethod(
          Invocation.setter(#notificationService, _notificationService),
          returnValueForMissingStub: null);
  @override
  String get playerId =>
      (super.noSuchMethod(Invocation.getter(#playerId), returnValue: '')
          as String);
  @override
  _i7.PlayerMode get mode => (super.noSuchMethod(Invocation.getter(#mode),
      returnValue: _i7.PlayerMode.MEDIA_PLAYER) as _i7.PlayerMode);
  @override
  _i7.PlayerState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i7.PlayerState.STOPPED) as _i7.PlayerState);
  @override
  set state(_i7.PlayerState? state) =>
      super.noSuchMethod(Invocation.setter(#state, state),
          returnValueForMissingStub: null);
  @override
  set playingRouteState(_i7.PlayingRoute? routeState) =>
      super.noSuchMethod(Invocation.setter(#playingRouteState, routeState),
          returnValueForMissingStub: null);
  @override
  set notificationState(_i7.PlayerState? state) =>
      super.noSuchMethod(Invocation.setter(#notificationState, state),
          returnValueForMissingStub: null);
  @override
  _i13.Stream<_i7.PlayerState> get onPlayerStateChanged =>
      (super.noSuchMethod(Invocation.getter(#onPlayerStateChanged),
              returnValue: Stream<_i7.PlayerState>.empty())
          as _i13.Stream<_i7.PlayerState>);
  @override
  _i13.Stream<_i7.PlayerState> get onNotificationPlayerStateChanged =>
      (super.noSuchMethod(Invocation.getter(#onNotificationPlayerStateChanged),
              returnValue: Stream<_i7.PlayerState>.empty())
          as _i13.Stream<_i7.PlayerState>);
  @override
  _i13.Stream<Duration> get onAudioPositionChanged =>
      (super.noSuchMethod(Invocation.getter(#onAudioPositionChanged),
          returnValue: Stream<Duration>.empty()) as _i13.Stream<Duration>);
  @override
  _i13.Stream<Duration> get onDurationChanged =>
      (super.noSuchMethod(Invocation.getter(#onDurationChanged),
          returnValue: Stream<Duration>.empty()) as _i13.Stream<Duration>);
  @override
  _i13.Stream<void> get onPlayerCompletion =>
      (super.noSuchMethod(Invocation.getter(#onPlayerCompletion),
          returnValue: Stream<void>.empty()) as _i13.Stream<void>);
  @override
  _i13.Stream<void> get onSeekComplete =>
      (super.noSuchMethod(Invocation.getter(#onSeekComplete),
          returnValue: Stream<void>.empty()) as _i13.Stream<void>);
  @override
  _i13.Stream<String> get onPlayerError =>
      (super.noSuchMethod(Invocation.getter(#onPlayerError),
          returnValue: Stream<String>.empty()) as _i13.Stream<String>);
  @override
  _i13.Future<int> play(String? url,
          {bool? isLocal,
          double? volume = 1.0,
          Duration? position,
          bool? respectSilence = false,
          bool? stayAwake = false,
          bool? duckAudio = false,
          bool? recordingActive = false}) =>
      (super.noSuchMethod(
          Invocation.method(#play, [
            url
          ], {
            #isLocal: isLocal,
            #volume: volume,
            #position: position,
            #respectSilence: respectSilence,
            #stayAwake: stayAwake,
            #duckAudio: duckAudio,
            #recordingActive: recordingActive
          }),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> playBytes(_i17.Uint8List? bytes,
          {double? volume = 1.0,
          Duration? position,
          bool? respectSilence = false,
          bool? stayAwake = false,
          bool? duckAudio = false,
          bool? recordingActive = false}) =>
      (super.noSuchMethod(
          Invocation.method(#playBytes, [
            bytes
          ], {
            #volume: volume,
            #position: position,
            #respectSilence: respectSilence,
            #stayAwake: stayAwake,
            #duckAudio: duckAudio,
            #recordingActive: recordingActive
          }),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> pause() => (super.noSuchMethod(Invocation.method(#pause, []),
      returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> stop() => (super.noSuchMethod(Invocation.method(#stop, []),
      returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> resume() =>
      (super.noSuchMethod(Invocation.method(#resume, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> release() =>
      (super.noSuchMethod(Invocation.method(#release, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> seek(Duration? position) =>
      (super.noSuchMethod(Invocation.method(#seek, [position]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> setVolume(double? volume) =>
      (super.noSuchMethod(Invocation.method(#setVolume, [volume]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> setReleaseMode(_i7.ReleaseMode? releaseMode) =>
      (super.noSuchMethod(Invocation.method(#setReleaseMode, [releaseMode]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> setPlaybackRate(double? playbackRate) =>
      (super.noSuchMethod(Invocation.method(#setPlaybackRate, [playbackRate]),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> setUrl(String? url,
          {bool? isLocal,
          bool? respectSilence = false,
          bool? recordingActive = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setUrl, [
            url
          ], {
            #isLocal: isLocal,
            #respectSilence: respectSilence,
            #recordingActive: recordingActive
          }),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> getDuration() =>
      (super.noSuchMethod(Invocation.method(#getDuration, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<int> getCurrentPosition() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPosition, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  _i13.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<int> earpieceOrSpeakersToggle() =>
      (super.noSuchMethod(Invocation.method(#earpieceOrSpeakersToggle, []),
          returnValue: Future<int>.value(0)) as _i13.Future<int>);
  @override
  bool isLocalUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#isLocalUrl, [url]),
          returnValue: false) as bool);
}

/// A class which mocks [AudioCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioCache extends _i1.Mock implements _i7.AudioCache {
  MockAudioCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, Uri> get loadedFiles =>
      (super.noSuchMethod(Invocation.getter(#loadedFiles),
          returnValue: <String, Uri>{}) as Map<String, Uri>);
  @override
  set loadedFiles(Map<String, Uri>? _loadedFiles) =>
      super.noSuchMethod(Invocation.setter(#loadedFiles, _loadedFiles),
          returnValueForMissingStub: null);
  @override
  String get prefix =>
      (super.noSuchMethod(Invocation.getter(#prefix), returnValue: '')
          as String);
  @override
  set prefix(String? _prefix) =>
      super.noSuchMethod(Invocation.setter(#prefix, _prefix),
          returnValueForMissingStub: null);
  @override
  set fixedPlayer(_i7.AudioPlayer? _fixedPlayer) =>
      super.noSuchMethod(Invocation.setter(#fixedPlayer, _fixedPlayer),
          returnValueForMissingStub: null);
  @override
  bool get respectSilence => (super
          .noSuchMethod(Invocation.getter(#respectSilence), returnValue: false)
      as bool);
  @override
  set respectSilence(bool? _respectSilence) =>
      super.noSuchMethod(Invocation.setter(#respectSilence, _respectSilence),
          returnValueForMissingStub: null);
  @override
  bool get duckAudio =>
      (super.noSuchMethod(Invocation.getter(#duckAudio), returnValue: false)
          as bool);
  @override
  set duckAudio(bool? _duckAudio) =>
      super.noSuchMethod(Invocation.setter(#duckAudio, _duckAudio),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> clear(Uri? fileName) => (super.noSuchMethod(
      Invocation.method(#clear, [fileName]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<void> clearAll() => (super.noSuchMethod(
      Invocation.method(#clearAll, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i13.Future<void>);
  @override
  _i13.Future<Uri> fetchToMemory(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#fetchToMemory, [fileName]),
          returnValue: Future<Uri>.value(_FakeUri_13())) as _i13.Future<Uri>);
  @override
  _i13.Future<Uri> load(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#load, [fileName]),
          returnValue: Future<Uri>.value(_FakeUri_13())) as _i13.Future<Uri>);
  @override
  _i13.Future<_i12.File> loadAsFile(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#loadAsFile, [fileName]),
              returnValue: Future<_i12.File>.value(_FakeFile_14()))
          as _i13.Future<_i12.File>);
  @override
  _i13.Future<List<Uri>> loadAll(List<String>? fileNames) =>
      (super.noSuchMethod(Invocation.method(#loadAll, [fileNames]),
              returnValue: Future<List<Uri>>.value(<Uri>[]))
          as _i13.Future<List<Uri>>);
  @override
  _i13.Future<_i7.AudioPlayer> play(String? fileName,
          {double? volume = 1.0,
          bool? isNotification,
          _i7.PlayerMode? mode = _i7.PlayerMode.MEDIA_PLAYER,
          bool? stayAwake = false,
          bool? recordingActive = false,
          bool? duckAudio}) =>
      (super.noSuchMethod(
              Invocation.method(#play, [
                fileName
              ], {
                #volume: volume,
                #isNotification: isNotification,
                #mode: mode,
                #stayAwake: stayAwake,
                #recordingActive: recordingActive,
                #duckAudio: duckAudio
              }),
              returnValue: Future<_i7.AudioPlayer>.value(_FakeAudioPlayer_7()))
          as _i13.Future<_i7.AudioPlayer>);
  @override
  _i13.Future<_i7.AudioPlayer> playBytes(_i17.Uint8List? fileBytes,
          {double? volume = 1.0,
          bool? isNotification,
          _i7.PlayerMode? mode = _i7.PlayerMode.MEDIA_PLAYER,
          bool? loop = false,
          bool? stayAwake = false,
          bool? recordingActive = false}) =>
      (super.noSuchMethod(
              Invocation.method(#playBytes, [
                fileBytes
              ], {
                #volume: volume,
                #isNotification: isNotification,
                #mode: mode,
                #loop: loop,
                #stayAwake: stayAwake,
                #recordingActive: recordingActive
              }),
              returnValue: Future<_i7.AudioPlayer>.value(_FakeAudioPlayer_7()))
          as _i13.Future<_i7.AudioPlayer>);
  @override
  _i13.Future<_i7.AudioPlayer> loop(String? fileName,
          {double? volume = 1.0,
          bool? isNotification,
          _i7.PlayerMode? mode = _i7.PlayerMode.MEDIA_PLAYER,
          bool? stayAwake = false}) =>
      (super.noSuchMethod(
              Invocation.method(#loop, [
                fileName
              ], {
                #volume: volume,
                #isNotification: isNotification,
                #mode: mode,
                #stayAwake: stayAwake
              }),
              returnValue: Future<_i7.AudioPlayer>.value(_FakeAudioPlayer_7()))
          as _i13.Future<_i7.AudioPlayer>);
}
