// Mocks generated by Mockito 5.1.0 from annotations
// in fluuter_boilerplate/test/mocks/app_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:typed_data' as _i9;

import 'package:bloc/bloc.dart' as _i6;
import 'package:fluuter_boilerplate/application/app_theme/theme_cubit.dart'
    as _i3;
import 'package:fluuter_boilerplate/infrastructure/theme_repo/theme_repo.dart'
    as _i2;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i8;
import 'package:hive/src/box/default_key_comparator.dart' as _i7;
import 'package:hive_flutter/hive_flutter.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAddThemeRepository_0 extends _i1.Fake
    implements _i2.AddThemeRepository {}

class _FakeThemeState_1 extends _i1.Fake implements _i3.ThemeState {}

class _FakeBox_2<E> extends _i1.Fake implements _i4.Box<E> {}

class _FakeLazyBox_3<E> extends _i1.Fake implements _i4.LazyBox<E> {}

/// A class which mocks [ThemeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeCubit extends _i1.Mock implements _i3.ThemeCubit {
  MockThemeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddThemeRepository get addThemeRepository =>
      (super.noSuchMethod(Invocation.getter(#addThemeRepository),
          returnValue: _FakeAddThemeRepository_0()) as _i2.AddThemeRepository);
  @override
  _i3.ThemeState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeThemeState_1()) as _i3.ThemeState);
  @override
  _i5.Stream<_i3.ThemeState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.ThemeState>.empty())
          as _i5.Stream<_i3.ThemeState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void toggleTheme(bool? isDark) =>
      super.noSuchMethod(Invocation.method(#toggleTheme, [isDark]),
          returnValueForMissingStub: null);
  @override
  void getTheme() => super.noSuchMethod(Invocation.method(#getTheme, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i3.ThemeState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i6.Change<_i3.ThemeState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i4.HiveInterface {
  MockHiveInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(String? path) =>
      super.noSuchMethod(Invocation.method(#init, [path]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i4.Box<E>> openBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i7.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i8.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          _i9.Uint8List? bytes,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #bytes: bytes,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.Box<E>>.value(_FakeBox_2<E>()))
          as _i5.Future<_i4.Box<E>>);
  @override
  _i5.Future<_i4.LazyBox<E>> openLazyBox<E>(String? name,
          {_i4.HiveCipher? encryptionCipher,
          _i4.KeyComparator? keyComparator = _i7.defaultKeyComparator,
          _i4.CompactionStrategy? compactionStrategy =
              _i8.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
              Invocation.method(#openLazyBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #encryptionKey: encryptionKey
              }),
              returnValue: Future<_i4.LazyBox<E>>.value(_FakeLazyBox_3<E>()))
          as _i5.Future<_i4.LazyBox<E>>);
  @override
  _i4.Box<E> box<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#box, [name]),
          returnValue: _FakeBox_2<E>()) as _i4.Box<E>);
  @override
  _i4.LazyBox<E> lazyBox<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#lazyBox, [name]),
          returnValue: _FakeLazyBox_3<E>()) as _i4.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) =>
      (super.noSuchMethod(Invocation.method(#isBoxOpen, [name]),
          returnValue: false) as bool);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteBoxFromDisk(String? name, {String? path}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteBoxFromDisk, [name], {#path: path}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  List<int> generateSecureKey() =>
      (super.noSuchMethod(Invocation.method(#generateSecureKey, []),
          returnValue: <int>[]) as List<int>);
  @override
  _i5.Future<bool> boxExists(String? name, {String? path}) =>
      (super.noSuchMethod(Invocation.method(#boxExists, [name], {#path: path}),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void registerAdapter<T>(_i4.TypeAdapter<T>? adapter,
          {bool? internal = false, bool? override = false}) =>
      super.noSuchMethod(
          Invocation.method(#registerAdapter, [adapter],
              {#internal: internal, #override: override}),
          returnValueForMissingStub: null);
  @override
  bool isAdapterRegistered(int? typeId) =>
      (super.noSuchMethod(Invocation.method(#isAdapterRegistered, [typeId]),
          returnValue: false) as bool);
  @override
  void ignoreTypeId<T>(int? typeId) =>
      super.noSuchMethod(Invocation.method(#ignoreTypeId, [typeId]),
          returnValueForMissingStub: null);
}

/// A class which mocks [AddThemeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddThemeRepository extends _i1.Mock
    implements _i2.AddThemeRepository {
  MockAddThemeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> addTheme(bool? isDark) =>
      (super.noSuchMethod(Invocation.method(#addTheme, [isDark]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> getSavedTheme() =>
      (super.noSuchMethod(Invocation.method(#getSavedTheme, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
